package nginx

import (
	"fmt"
	"path/filepath"
	"strings"

	"github.com/jozefcipa/novus/internal/brew"
	"github.com/jozefcipa/novus/internal/config"
	"github.com/jozefcipa/novus/internal/fs"
	"github.com/jozefcipa/novus/internal/logger"
	"github.com/jozefcipa/novus/internal/novus"
	"github.com/jozefcipa/novus/internal/shared"
)

var NginxServersDir string

const fileHeader = `# DO NOT EDIT THIS FILE!!!
# This configuration is auto-generated by Novus

`

func init() {
	// /opt/homebrew/etc/nginx/nginx.conf - main config
	// /opt/homebrew/etc/nginx/servers/* - directory of loaded configs
	NginxServersDir = filepath.Join(brew.BrewPath, "/etc/nginx/servers")
}

func Restart() {
	brew.RestartService("nginx")
}

func Stop() {
	brew.StopService("nginx")
}

func IsRunning() bool {
	return brew.IsServiceRunning("nginx")
}

func Configure(novusConf config.NovusConfig, sslCerts shared.DomainCertificates) bool {
	// Create default server config if it doesn't exist
	nginxDefaultConf := readServerConfig(getDefaultConfigName())
	if nginxDefaultConf == "" {
		defaultConfig := fileHeader
		defaultConfig += fs.ReadFileOrExit(filepath.Join(fs.AssetsDir, "nginx/default-server.template.conf"))
		defaultConfig = strings.Replace(defaultConfig, "--ERRORS_DIR--", filepath.Join(fs.AssetsDir, "nginx"), -1)

		logger.Debugf("Generated default server Nginx config: \n\n%s", defaultConfig)
		writeServerConfig(getDefaultConfigName(), defaultConfig)
	}

	// Create application server config if it doesn't exist
	nginxAppConf := readServerConfig(getAppConfigName(config.AppName()))
	newNginxAppConf := buildServerConfig(novusConf, sslCerts)

	if nginxAppConf == "" || nginxAppConf != newNginxAppConf {
		logger.Debugf("Generated application server Nginx config: \n\n%s", newNginxAppConf)
		writeServerConfig(getAppConfigName(config.AppName()), newNginxAppConf)
		logger.Checkf("Nginx configuration updated")
		return true
	} else {
		logger.Checkf("Nginx configuration is up to date")
		return false
	}
}

func readServerConfig(fileName string) string {
	path := filepath.Join(NginxServersDir, fileName)
	logger.Debugf("Reading Nginx config [%s]", path)

	// If file doesn't exist (an error is thrown) just return an empty string and we'll create a new config later
	file, _ := fs.ReadFile(path)

	return file
}

func writeServerConfig(fileName string, serverConfig string) {
	path := filepath.Join(NginxServersDir, fileName)
	logger.Debugf("Updating Nginx config [%s]", path)

	fs.WriteFileOrExit(path, serverConfig)
}

func buildServerConfig(appConfig config.NovusConfig, sslCerts shared.DomainCertificates) string {
	// Read template file
	serverConfigTemplate := fs.ReadFileOrExit(filepath.Join(fs.AssetsDir, "nginx/server.template.conf"))

	// Update routes in state
	appState, _ := novus.GetAppState(config.AppName())
	appState.Routes = appConfig.Routes

	// Iterate through all the routes and generate Nginx config
	serverConfig := fileHeader
	for _, route := range appConfig.Routes {
		sslCert := sslCerts[route.Domain]

		// Create Nginx server block
		routeConfig := strings.ReplaceAll(serverConfigTemplate, "--SERVER_NAME--", route.Domain)
		routeConfig = strings.ReplaceAll(routeConfig, "--UPSTREAM_ADDR--", route.Upstream)
		routeConfig = strings.ReplaceAll(routeConfig, "--ERRORS_DIR--", filepath.Join(fs.AssetsDir, "nginx"))
		routeConfig = strings.ReplaceAll(routeConfig, "--SSL_CERT_PATH--", sslCert.CertFilePath)
		routeConfig = strings.ReplaceAll(routeConfig, "--SSL_KEY_PATH--", sslCert.KeyFilePath)

		serverConfig += routeConfig + "\n"
	}

	return serverConfig
}

func getDefaultConfigName() string {
	return "novus-default.conf"
}

func getAppConfigName(appName string) string {
	return fmt.Sprintf("novus-app-%s.conf", appName)
}
